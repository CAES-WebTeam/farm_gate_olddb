@page "/admin/AddCommodity"
@using farmGate.Shared.Models
@using farmGate.Client.Services
@inject CommodityService commodityService
@inject CategoryService categoryService
@inject IJSRuntime JSRuntime

<h1>Admin: Commodities</h1>

<!-- Form to add new commodity -->
<form @onsubmit="AddCommodities">
    <div class="form-group">
        <label for="commodityName">Enter commodity name:</label>
        <input id="commodityName" class="form-control" @bind="newCommodity.Name" placeholder="Commodity name" />
    </div>
    <div class="form-group">
        <label for="categorySelect">Please choose category of commodity (required):</label>
        <select id="categorySelect" class="form-control" @bind="selectedCategoryId">
            <option value="">Select Category</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
</form>

<h2>Current Commodities</h2>
<!-- Edit Commodity Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Commodity</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Your edit form here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="() => PromptDeleteCommodity(modalCommodityId)">Delete</button>
                <button type="button" class="btn btn-primary" @onclick="EditCommodity">Save Changes</button>

            </div>
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Commodity</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the commodity <strong>@modalCommodityName</strong> from category <strong>@modalCategoryName</strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="() => DeleteCommodity(modalCommodityId)">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr class="d-flex">
                @foreach (var category in categories)
                {
                    <th class="col">
                        <button class="btn btn-link" @onclick="() => ToggleCategory(category.Id)">
                            <i class="@(isExpanded[category.Id] ? "bi bi-arrows-collapse" : "bi bi-arrows-expand")"></i>
                            @category.Name
                        </button>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            <tr class="d-flex">
                @foreach (var category in categories)
                {
                    <td class="col">
                        @if (isExpanded[category.Id])
                        {
                            <ul>
                                @foreach (var commodity in commodities.Where(c => c.CategoryId == category.Id))
                                {
                                    <li class="d-flex justify-content-between">
                                        <span>@commodity.Name</span>
                                        <div>
                                            <!-- Removed Delete icon -->
                                            <button class="btn btn-link text-primary" @onclick="() => PromptEditCommodity(commodity.Id)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </td>
                }
            </tr>
        </tbody>
    </table>
</div>

@code {
    private List<Commodity> commodities;
    private List<Category> categories;
    private Commodity newCommodity = new Commodity();
    private Commodity editCommodity = new Commodity(); // For editing
    private int selectedCategoryId;
    private Dictionary<int, bool> isExpanded = new Dictionary<int, bool>();
    private string modalCommodityName = "";
    private string modalCategoryName = "";
    private int modalCommodityId = 0;

    protected override async Task OnInitializedAsync()
    {
        commodities = new List<Commodity>();
        categories = new List<Category>();
        


        commodities = await commodityService.GetAllCommoditiesAsync();
        categories = await categoryService.GetCategoriesAsync();

        foreach (var category in categories)
        {
            isExpanded[category.Id] = true;
        }
    }

    private void ToggleCategory(int categoryId)
    {
        isExpanded[categoryId] = !isExpanded[categoryId];
    }

    private async Task AddCommodities()
    {
        newCommodity.CategoryId = selectedCategoryId;
        var addedCommodity = await commodityService.AddCommodityAsync(newCommodity);
        commodities.Add(addedCommodity);
        newCommodity = new Commodity();
    }

    private async Task PromptDeleteCommodity(int commodityId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "#editModal");
        var commodity = commodities.FirstOrDefault(c => c.CommID == commodityId);
        if (commodity != null)
        {
            modalCommodityName = commodity.Name;
            modalCommodityId = commodity.CommID;
            modalCategoryName = categories.FirstOrDefault(cat => cat.Id == commodity.CategoryId)?.Name ?? "Unknown";
            await JSRuntime.InvokeVoidAsync("showModal", "#deleteModal");
        }
    }

    private async Task DeleteCommodity(int commodityId)
    {
        var success = await commodityService.DeleteCommodityAsync(commodityId);
        if (success)
        {
            commodities.RemoveAll(c => c.Id == commodityId);
            await JSRuntime.InvokeVoidAsync("hideModal", "#deleteModal");
        }
        else
        {
            // Handle error
        }
    }

    private async Task PromptEditCommodity(int commodityId)
    {
        var commodity = commodities.FirstOrDefault(c => c.CommID == commodityId);
        if (commodity != null)
        {
            editCommodity = new Commodity
                {
                    CommID = commodity.CommID,
                    Name = commodity.Name,
                    CategoryId = commodity.CategoryId
                };
            modalCommodityId = commodity.CommID;
            await JSRuntime.InvokeVoidAsync("showModal", "#editModal");
        }
    }

    private async Task EditCommodity()
    {
        var updatedCommodity = await commodityService.UpdateCommodityAsync(editCommodity);
        if (updatedCommodity != null)
        {
            var index = commodities.FindIndex(c => c.CommID == editCommodity.CommID);
            commodities[index] = updatedCommodity;
            await JSRuntime.InvokeVoidAsync("hideModal", "#editModal");
        }
        else
        {
            // Handle error
        }
    }
}
